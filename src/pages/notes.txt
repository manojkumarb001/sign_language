import React, { useState, useEffect } from "react";
import "../styles/Dashboard.css";
import axios from "axios";
import { FaBars, FaSignOutAlt } from "react-icons/fa";
import { BsFillMicFill } from "react-icons/bs";

const Dashboard = ({ username, onLogout, token }) => {
  const [recording, setRecording] = useState(false);
  const [transcribedText, setTranscribedText] = useState("");
  const [signText, setSignText] = useState("");
  const [conversations, setConversations] = useState([]);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const API_URL = "http://localhost:5000";

  useEffect(() => {
    fetchConversations();
  }, []);

  const fetchConversations = async () => {
    try {
      const response = await axios.get(`${API_URL}/conversations`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setConversations(response.data.conversations || []);
    } catch (error) {
      console.error("Error fetching conversations:", error);
    }
  };

  const handleRecord = async () => {
    setRecording(true);
    try {
      const response = await axios.post(
        `${API_URL}/record`,
        {},
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setTranscribedText(response.data.speech_text);
      setSignText(response.data.sign_language);
      setConversations([...conversations, response.data]);
    } catch (error) {
      console.error("Error recording speech:", error);
    }
    setRecording(false);
  };

  return (
    <div className="dashboard-container">
      {/* Main Section */}
      <div className="main-content">
        <div className="navbar">
          <FaBars className="menu-icon" onClick={() => setSidebarOpen(!sidebarOpen)} />
          <h1>Hello, {username}</h1>
          <button onClick={onLogout} className="logout-btn">
            Logout
          </button>
        </div>

        {/* Sidebar - Only visible when sidebarOpen is true */}
        {sidebarOpen && (
          <div className="sidebar">
            <h2 className="app-title">SignifyX 007</h2>
            <ul className="conversation-list">
              {conversations.map((conv, index) => (
                <li key={index} className="conversation-item">
                  {conv.speech_text}
                </li>
              ))}
            </ul>
            <div className="sidebar-footer">
              <span>{username}</span>
              <button onClick={onLogout} className="logout-btn">
                <FaSignOutAlt /> Logout
              </button>
            </div>
          </div>
        )}

        {/* Recording Section */}
        <div className="record-section">
          <div className={`record-box ${recording ? "recording" : ""}`}></div>
          <button className="record-btn" onClick={handleRecord} disabled={recording}>
            <BsFillMicFill /> {recording ? "Recording..." : "Record"}
          </button>
        </div>

        {/* Transcribed Text */}
        {transcribedText && (
          <div className="text-box">
            <h3>Transcribed Text</h3>
            <p>{transcribedText}</p>
          </div>
        )}

        {/* Sign Language Animation */}
        {signText && (
          <div className="sign-box">
            <h3>Sign Language Animation</h3>
            <p>{signText}</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default Dashboard;